## Generate Java style variable names from a component name
#macro( variable $name )${name.substring(0,1).toLowerCase()}${name.substring(1).replace(' ', '')}#end

## Generate Java style class names from a component name
#macro( class $name )${name.replace(' ', '')}#end

## Generate Java style consant names from a component name
#macro( constant $name )${name.replace(' ', '_').toUpperCase()}#end

## Get the type of a robot component
#macro( type $component )${helper.getInstruction($component, "ClassName")}#end

## Get the declaration instruction of a robot component
#macro( declaration $component )${helper.getInstruction($component, "Declaration")}#end

## Get the constructor instruction of a robot component
#macro( constructor $component )${helper.getInstruction($component, "Construction")}#end

## Get the livewindow instruction of a robot component
#macro( livewindow $component )${helper.getInstruction($component, "LiveWindow")}#end

## Get the extra instruction of a robot component
#macro( extra $component )${helper.getInstruction($component, "Extra")}#end

## Get the extra instruction of a robot component
#macro( function $component )${helper.getInstruction($component, "Function")}#end

## Get the extra instruction of a robot component
#macro( pid $component )${helper.getInstruction($component, "PID")}#end

## Generate command parameter declaration for Java
#macro( param_declaration_java $param )$param.getType() $param.getName()#end

## Generate parameter use
#macro( param_set $param )#if( $param.isSubsystemConstant() )#constant_use( $param )#elseif( $param.isReference() )$param.getValue().substring(1)#else#if( $param.getType() == "String" )"$param.getValue()"#else#if( $param.getType() == "byte" )(byte) #end$param.getValue()#if( $param.getType() == "long" )L#end#end#end#end

#macro( constant_use $constant )#class( $helper.stringSplit($constant.getValue(), "\.").get(0) ).$helper.stringSplit($constant.getValue(), "\.").get(1)#end

## Generates 'new MyCommand(arg0, arg1, arg2, ...)'
#macro( command_instantiation $command $params )
#set($len = $params.size() - 2)
#set($last = $len + 1)
new #class($command)(#if( $len >= 0 )#foreach($i in [0..$len])#param_set( $params.get($i) ), #end#end#if( $last >= 0 )#param_set( $params.get($last) )#end)#end

## Generate constants
#macro( declare_constant $constant )
public static final $constant.getType() $constant.getName() = #if( $constant.getType() == "String" )"$constant.getValue()"#else$constant.getValue()#end;
#end

## Generate autogenerated code blocks
#macro( autogenerated_code $id $space )
$space// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=$id.toUpperCase()
$bodyContent
$space// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=$id.toUpperCase()
#end

## Generate the header
#macro( header )
// ${version_indicator}
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#end