#header()

#set($subsystem = $helper.getByName($subsystem_name, $robot))

\#include "Subsystems/#class($subsystem.name).h"
\#include "frc/SmartDashboard/SmartDashboard.h"
\#include "frc/LiveWindow/LiveWindow.h"
#@autogenerated_code("includes", "")
#parse("${exporter_path}Subsystem-includes.cpp")
#end
#set($subsystem = $helper.getByName($subsystem_name, $robot))

#@autogenerated_code("constants", "")
#parse("${exporter_path}Subsystem-constants.cpp")
#end

#@autogenerated_code("pid", "")
#parse("${exporter_path}PIDSubsystem-pid.cpp")
#end

#@autogenerated_code("declarations", "    ")
#parse("${exporter_path}Subsystem-declarations.cpp")
#end

    // Use these to get going:
    // SetSetpoint() -  Sets where the PID controller should move the system
    //                  to
    // Enable() - Enables the PID controller.
}

double #class($subsystem.name)::ReturnPIDInput() {
    // Return your input value for the PID loop
    // e.g. a sensor, like a potentiometer:
    // yourPot->SetAverageVoltage() / kYourMaxVoltage;
#@autogenerated_code("source", "    ")
#parse("${exporter_path}PIDSubsystem-source.cpp")
#end
}

void #class($subsystem.name)::UsePIDOutput(double output) {
    // Use output to drive your system, like a motor
    // e.g. yourMotor->Set(output);
#@autogenerated_code("output", "    ")
#parse("${exporter_path}PIDSubsystem-output.cpp")
#end
}

void #class($subsystem.name)::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
#@autogenerated_code("default_command", "    ")
#parse("${exporter_path}Subsystem-default_command.cpp")
#end
}

#@autogenerated_code("cmdpidgetters","      ")
#parse("${exporter_path}Subsystem-pidgetters.cpp")
#end

