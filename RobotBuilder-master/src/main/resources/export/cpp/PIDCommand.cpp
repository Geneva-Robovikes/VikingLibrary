#set($command = $helper.getByName($command_name, $robot))
#set($params = $command.getProperty("Parameters").getValue())
#header()

\#include "Commands/#class($command.name).h"

#@autogenerated_code("constructor", "    ")
#parse("${exporter_path}PIDCommand-constructor.cpp")
#end
#@autogenerated_code("pid", "        ")
#parse("${exporter_path}PIDCommand-pid.cpp")
#end

        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
#@autogenerated_code("requires", "        ")
#parse("${exporter_path}Command-requires.cpp")
#end
}

double #class($command.name)::ReturnPIDInput() {
    // Return your input value for the PID loop
    // e.g. a sensor, like a potentiometer:
    // yourPot.getAverageVoltage() / kYourMaxVoltage;

#@autogenerated_code("source", "        ")
#parse("${exporter_path}PIDCommand-source.cpp")
#end
    }

void #class($command.name)::UsePIDOutput(double output) {
    // Use output to drive your system, like a motor
    // e.g. yourMotor.set(output);

#@autogenerated_code("output", "        ")
#parse("${exporter_path}PIDCommand-output.cpp")
#end
}

// Called just before this Command runs the first time
void #class($command.name)::Initialize() {
}

// Called repeatedly when this Command is scheduled to run
void #class($command.name)::Execute() {
}

// Make this return true when this Command no longer needs to run execute()
bool #class($command.name)::IsFinished() {
    return false;
}

// Called once after isFinished returns true

void #class($command.name)::End() {
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void #class($command.name)::Interrupted() {
}