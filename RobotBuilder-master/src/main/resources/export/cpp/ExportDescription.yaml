## This file describes the export from RobotBuilder to C++. The
## format is YAML 1.1 (http://www.yaml.org/) with instructions that
## are post-processed with Velocity (velocity.apache.org).
##
## This is the actual exporter for C++, but also serves as a good
## example of a complicated exporter.
##
## Name: The name of this exporter to be displayed in menus.
## Type: The type, this will affect where it is displayed.
## Toolbar: Whether or not it displays on the toolbar by default.
## Files: A YAML file pre-processed by velocity that describes which
##     files to export and how.
## Begin Modification: A string that indicates the beginning of an
##     area that will be modified and replaced by auto-generated code.
## End Modification: A string that indicates the end of an area
##     that will be modified and replaced by auto-generated code.
## Required Properties: A list of robot properties that must be filled
##     out for this export to actually begin export. If these are not
##     filled out, the export alerts the user and stops.
## Vars: A map of variable names to values that are available for the
##     entire export.
## Macros: A file containing the velocity macros for this export.
##
## Defaults: A map of default names to their instruction sets. The
##     instruction sets are a map of instruction names to instructions
##     that may contain velocity templating. These defaults are used
##     if component instructions do not specify a specific
##     instruction.
##
## Instructions: A map of palette components to their defaults and
##     instruction sets. The defaults are a comma-seperated string
##     with the highest priority default first. The instructions
##     themselves vary from language to language, in the java
##     exporter:
##
##     - Export: The export instruction specifies the file to export
##           this component to.
##     - Import: The java import so that this component is properly
##           imported in the generated java file
##     - Declaration: The declaration to declare a variable
##           representing this component.
##     - Construction: The constructor to create this component.
##     - LiveWindow: Put this component on the livewindow properly.
##     - Extra: Extra configuration for after the constructor is done.
##     - ClassName: The java class name of this object.

Name: C++
Type: Code
Toolbar: true
Files: files.yaml
Begin Modification: // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=$id.toUpperCase()
End Modification: // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=$id.toUpperCase()
Required Properties:
  - Export Directory

Vars:
  project_lang: cpp
  team_number: ${robot.getProperty('Team Number').getValue()}
  robot_name: ${robot.getName()}
  world_file: ${robot.getProperty('Simulation World File').getValue()}
  project: ${robot.getPropertyAbsolutePath('Export Directory')}$file_separator$robot_name
Macros: macros.vm

Post Export Action: "#Message:You have successfully exported. You can now open the project in VS Code and extend the generated code."

Instruction Names: ["Export", "Import", "Declaration", "Construction", "LiveWindow", "Extra", "Prototype", "Function", "PID", "ClassName"]

Defaults:
  Component:
    Export: "RobotMap"
    Declaration: "static std::shared_ptr<${ClassName}> #variable($Name);"
  CustomComponent:
    Export: "RobotMap"
    Import: "\\#include \"Custom/${ClassName}.h\""
    Declaration: "static std::shared_ptr<${ClassName}> #variable($Name);"
  None:
    Export: ""
    Import: ""
    Declaration: ""
    Construction: ""
    LiveWindow: ""
    Extra: ""
    Prototype: ""
    Function: ""
    PID: "#variable($Short_Name)->PIDGet()"
    ClassName: ""
  AnalogInput:
    Construction: "#variable($Name).reset(new ${ClassName}(${Input_Channel_Analog}));"
    LiveWindow: "AddChild(\"$Short_Name\", #variable($Name));"
    PID: "#variable($Short_Name)->GetAverageVoltage()"
  AnalogPotentiometer:
    Construction: "#variable($Name).reset(new ${ClassName}(${Input_Channel_Analog}, ${Full_Range}, ${Offset}));"
    LiveWindow: "AddChild(\"$Short_Name\", #variable($Name));"
    PID: "#variable($Short_Name)->Get()"
  DigitalInput:
    Construction: "#variable($Name).reset(new ${ClassName}(${Input_Channel_Digital}));"
    LiveWindow: "AddChild(\"$Short_Name\", #variable($Name));"
  PWMOutput:
    Construction: "#variable($Name).reset(new ${ClassName}(${Output_Channel_PWM}));"
    LiveWindow: "AddChild(\"$Short_Name\", #variable($Name));"
  RelayOutput:
    Construction: "#variable($Name).reset(new ${ClassName}(${Output_Channel_Relay}));"
    LiveWindow: "AddChild(\"$Short_Name\", #variable($Name));"
  AnalogOutput:
    Construction: "#variable($Name).reset(new ${ClassName}(${Output_Channel_AnalogOutput}));"
    LiveWindow: "AddChild(\"$Short_Name\", #variable($Name));"
  SolenoidOutput:
    Construction: "#variable($Name).reset(new ${ClassName}(${Output_PCM_Solenoid}, ${Output_Channel_Solenoid}));"
    LiveWindow: "AddChild(\"$Short_Name\", #variable($Name));"
  OI:
    Export: "OI"
    Declaration: "std::shared_ptr<${ClassName}> #variable($Name);"
  Button:
    Extra:  "#if(\"$Command\" != \"None\")#variable($Name)->${When_to_Run.substring(0,1).toUpperCase()}${When_to_Run.substring(1)}(#command_instantiation($Command $Parameters));#end"
  Command:
    Export: "OI"
    Import: "\\#include \"Commands/#class($Short_Name).h\""

Instructions:
  Robot:
    Defaults: "None"
  Subsystems:
    Defaults: "None"
  OI:
    Defaults: "None"
  Commands:
    Defaults: "None"
  Subsystem:
    Defaults: "None"
    Export: "Robot"
    Import: "\\#include \"Subsystems/#class($Short_Name).h\""
    Declaration: "static std::shared_ptr<#class($Short_Name)> #variable($Short_Name);"
    Construction: "#variable($Short_Name).reset(new #class($Short_Name)());"
    ClassName: "frc::Subsystem"
  PID Subsystem:
    Defaults: "None"
    Export: "Robot"
    Import: "\\#include \"Subsystems/#class($Short_Name).h\""
    Declaration: "static std::shared_ptr<#class($Short_Name)> #variable($Short_Name);"
    Construction: "#variable($Short_Name).reset(new #class($Short_Name)());"

  PID Controller:
    Defaults: "Component,None"
    ClassName: "frc::PIDController"
    Construction: "#variable($Name).reset(new ${ClassName}($P, $I, $D,/* F: $F, */ #variable($Input).get(), #variable($Output).get(), $Period));"
    Extra: >
      #variable($Name)->SetContinuous(${Continuous});
      #variable($Name)->SetAbsoluteTolerance(${Tolerance});
      #if($Limit_Input)

          #variable($Name)->SetInputRange(${Minimum_Input}, ${Maximum_Input});#end
      #if(true)

          #variable($Name)->SetOutputRange(${Minimum_Output}, ${Maximum_Output});#end
      #if($Send_to_SmartDashboard)

          SmartDashboard::PutData("${Name}", #variable($Name).get());#end

    LiveWindow: "AddChild(\"$Short_Name\", #variable($Name));"

  Robot Drive 2:
    Defaults: "Component,None"
    ClassName: "frc::RobotDrive"
    Construction: "#variable($Name).reset(new ${ClassName}(#variable($Left_Motor), #variable($Right_Motor)));"
    Extra: >
      #variable($Name)->SetSafetyEnabled($Safety_Enabled);
              #variable($Name)->SetExpiration($Safety_Expiration_Time);
              #variable($Name)->SetSensitivity($Sensitivity);
              #variable($Name)->SetMaxOutput($Maximum_Output);
      #if($Left_Motor_Inverted)
              #variable($Name)->SetInvertedMotor(frc::RobotDrive::kRearLeftMotor, true);#end
      #if($Right_Motor_Inverted)

              #variable($Name)->SetInvertedMotor(frc::RobotDrive::kRearRightMotor, true);#end

  Robot Drive 4:
    Defaults: "Component,None"
    ClassName: "frc::RobotDrive"
    Construction: >-
      #variable($Name).reset(new ${ClassName}(#variable($Left_Front_Motor), #variable($Left_Rear_Motor),
                    #variable($Right_Front_Motor), #variable($Right_Rear_Motor)));
    Extra: >
      #variable($Name)->SetSafetyEnabled($Safety_Enabled);
              #variable($Name)->SetExpiration($Safety_Expiration_Time);
              #variable($Name)->SetSensitivity($Sensitivity);
              #variable($Name)->SetMaxOutput($Maximum_Output);
      #if($Left_Front_Motor_Inverted)
              #variable($Name)->SetInvertedMotor(frc::RobotDrive::kFrontLeftMotor, true);#end
      #if($Left_Rear_Motor_Inverted)

              #variable($Name)->SetInvertedMotor(frc::RobotDrive::kRearLeftMotor, true);#end
      #if($Right_Front_Motor_Inverted)

              #variable($Name)->SetInvertedMotor(frc::RobotDrive::kFrontRightMotor, true);#end
      #if($Right_Rear_Motor_Inverted)

              #variable($Name)->SetInvertedMotor(frc::RobotDrive::kRearRightMotor, true);#end

  Speed Controller Group:
    Defaults: "Component,None"
    ClassName: "frc::SpeedControllerGroup"
    LiveWindow: "AddChild(\"$Short_Name\", #variable($Name));"
    Construction: >-
      #variable($Name) = std::make_shared<${ClassName}>(*#variable($SpeedController1), *#variable($SpeedController2)
      #if(($SpeedController3)), *#variable($SpeedController3)#end #if(($SpeedController4)), *#variable($SpeedController4)#end);
  Differential Drive:
    Defaults: "Component,None"
    ClassName: "frc::DifferentialDrive"
    Construction: "#variable($Name).reset(new ${ClassName}(*#variable($Left_Motor), *#variable($Right_Motor)));"
    LiveWindow: "AddChild(\"$Short_Name\", #variable($Name));"
    Extra: >
      #variable($Name)->SetSafetyEnabled($Safety_Enabled);
              #variable($Name)->SetExpiration($Safety_Expiration_Time);
              #variable($Name)->SetMaxOutput($Maximum_Output);
  Mecanum Drive:
    Defaults: "Component,None"
    ClassName: "frc::MecanumDrive"
    LiveWindow: "AddChild(\"$Short_Name\", #variable($Name));"
    Construction: >-
      #variable($Name).reset(new ${ClassName}(*#variable($Left_Front_Motor), *#variable($Left_Rear_Motor),
                    *#variable($Right_Front_Motor), *#variable($Right_Rear_Motor)));
    Extra: >
      #variable($Name)->SetSafetyEnabled($Safety_Enabled);
              #variable($Name)->SetExpiration($Safety_Expiration_Time);
              #variable($Name)->SetMaxOutput($Maximum_Output);
  Killough Drive:
    Defaults: "Component,None"
    ClassName: "frc::KilloughDrive"
    LiveWindow: "AddChild(\"$Short_Name\", #variable($Name));"
    Construction: >-
      #variable($Name).reset(new ${ClassName}(*#variable($Left_Motor), *#variable($Right_Motor),
                    *#variable($Back_Motor)));
    Extra: >
      #variable($Name)->SetSafetyEnabled($Safety_Enabled);
              #variable($Name)->SetExpiration($Safety_Expiration_Time);
              #variable($Name)->SetMaxOutput($Maximum_Output);

  AnalogGyro:
    Defaults: "AnalogInput,Component,None"
    ClassName: "frc::AnalogGyro"
    Extra: "#variable($Name)->SetSensitivity(${Sensitivity});"
    PID: "#variable($Short_Name)->PIDGet()"
  AnalogAccelerometer:
    Defaults: "AnalogInput,Component,None"
    ClassName: "frc::AnalogAccelerometer"
    PID: "#variable($Short_Name)->GetAcceleration()"
    Extra: >-
      #variable($Name)->SetSensitivity(${Volts_Per_G});
              #variable($Name)->SetZero(${Zero_G_Volts});
  Quadrature Encoder:
    Defaults: "DigitalInput,Component,None"
    ClassName: "frc::Encoder"
    Construction: "#variable($Name).reset(new ${ClassName}(${Channel_A_Channel_Digital}, ${Channel_B_Channel_Digital}, ${Reverse_Direction}, frc::Encoder::${Encoding_Type}));"
    Extra: >-
      #variable($Name)->SetDistancePerPulse(${Distance_Per_Pulse});
          #variable($Name)->SetPIDSourceType(frc::PIDSourceType::${PID_Source});
  Indexed Encoder:
    Defaults: "DigitalInput,Component,None"
    ClassName: "frc::Encoder"
    Construction: "#variable($Name).reset(new ${ClassName}(${Channel_A_Channel_Digital}, ${Channel_B_Channel_Digital}, ${Reverse_Direction}));"
    Extra: >-
      #variable($Name)->SetDistancePerPulse(${Distance_Per_Pulse});
          #variable($Name)->SetPIDSourceType(frc::PIDSourceType::${PID_Source});
          #variable($Name)->SetIndexSource((unsigned int)${Index_Channel_Digital}, frc::Encoder::IndexingType::${Indexing_Type});
  Gear Tooth Sensor:
    Defaults: "DigitalInput,Component,None"
    ClassName: "frc::GearTooth"
    Construction: "#variable($Name).reset(new ${ClassName}(${Input_Channel_Digital}, ${Direction_Sensitive}));"
  Analog Potentiometer:
    Defaults: "AnalogPotentiometer,Component,None"
    ClassName: "frc::AnalogPotentiometer"
  Analog Input:
    Defaults: "AnalogInput,Component,None"
    ClassName: "frc::AnalogInput"
  Limit Switch:
    Defaults: "DigitalInput,Component,None"
    ClassName: "frc::DigitalInput"
  Digital Input:
    Defaults: "DigitalInput,Component,None"
    ClassName: "frc::DigitalInput"
  Ultrasonic:
    Defaults: "DigitalInput,Component,None"
    ClassName: "frc::Ultrasonic"
    Construction: "#variable($Name).reset(new ${ClassName}(${Ping_Channel_Digital}, ${Echo_Channel_Digital}));"
  PowerDistributionPanel:
    Defaults: "Component,None"
    ClassName: "frc::PowerDistributionPanel"
    Construction: "#variable($Name).reset(new ${ClassName}($CAN_ID));"
    LiveWindow: "AddChild(\"$Short_Name\", #variable($Name));"

  Speed Controller:
    Defaults: "PWMOutput,Component,None"
    ClassName: "frc::SpeedController"
    Construction: "#variable($Name).reset(new frc::${Type}(${Output_Channel_PWM}));"
    LiveWindow: "AddChild(\"$Short_Name\", std::static_pointer_cast<frc::${Type}>(#variable($Name)));"
  Nidec Brushless:
    Defaults: "Component,None"
    ClassName: "frc::NidecBrushless"
    Construction: "#variable($Name).reset(new ${ClassName}(${Output_Channel_PWM}, ${Output_Channel_Digital}));"
    LiveWindow: "AddChild(\"$Short_Name\", #variable($Name));"
  Servo:
    Defaults: "PWMOutput,Component,None"
    ClassName: "frc::Servo"
  Digital Output:
    Defaults: "Component,None"
    ClassName: "frc::DigitalOutput"
    Construction: "#variable($Name).reset(new ${ClassName}(${Output_Channel_Digital}));"
    LiveWindow: "AddChild(\"$Short_Name\", #variable($Name));"
  Spike:
    Defaults: "RelayOutput,Component,None"
    ClassName: "frc::Relay"
  Analog Output:
    Defaults: "AnalogOutput,Component,None"
    ClassName: "frc::AnalogOutput"

  Compressor:
    Defaults: "Component,None"
    ClassName: "frc::Compressor"
    Construction: "#variable($Name).reset(new ${ClassName}(${PCM_ID}));"
    LiveWindow: "AddChild(\"$Short_Name\", #variable($Name));"
  Solenoid:
    Defaults: "SolenoidOutput,Component,None"
    ClassName: "frc::Solenoid"
  Relay Solenoid:
    Defaults: "RelayOutput,Component,None"
    ClassName: "frc::Relay"
  Double Solenoid:
    Defaults: "Solenoid,Component,None"
    ClassName: "frc::DoubleSolenoid"
    Construction: >-
      #if(${Forward_PCM_Solenoid} != ${Reverse_PCM_Solenoid})Warning, the two modules in robot builder are different!

      #end##

      #variable($Name).reset(new ${ClassName}(${Forward_PCM_Solenoid}, ${Forward_Channel_Solenoid}, ${Reverse_Channel_Solenoid}));
    LiveWindow: "AddChild(\"$Short_Name\", #variable($Name));"

  Joystick:
    Defaults: "OI,None"
    ClassName: "frc::Joystick"
    Construction: "#variable($Name).reset(new ${ClassName}(${Number}));"
    Prototype: "std::shared_ptr<${ClassName}> get#class($Name)();"
    Function: >-
       std::shared_ptr<${ClassName}> OI::get#class($Name)() {
          return #variable($Name);
       }
  Joystick Button:
    Defaults: "Button,OI,None"
    ClassName: "frc::JoystickButton"
    Construction: "#variable($Name).reset(new ${ClassName}(#variable($Joystick).get(), ${Button}));"

  Command:
    Defaults: "Command,None"
    ClassName: "frc::Command"
  Command Group:
    Defaults: "Command,None"
  PID Command:
    Defaults: "Command,None"
  Setpoint Command:
    Defaults: "Command,None"
  Instant Command:
    Defaults: "Command,None"
  Timed Command:
    Defaults: "Command,None"
  Conditional Command:
    Defaults: "Command,None"
