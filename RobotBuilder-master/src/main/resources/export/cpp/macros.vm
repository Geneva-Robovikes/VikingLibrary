## Generate Java style variable names from a component name
#macro( variable $name )${name.substring(0,1).toLowerCase()}${name.substring(1).replace(' ', '')}#end

## Generate Java style class names from a component name
#macro( class $name )${name.replace(' ', '')}#end

## Generate Java style consant names from a component name
#macro( constant $name )${name.replace(' ', '_').toUpperCase()}#end

## Get the type of a robot component
#macro( type $component )${helper.getInstruction($component, "ClassName")}#end

## Get the declaration instruction of a robot component
#macro( declaration $component )${helper.getInstruction($component, "Declaration")}#end

## Get the constructor instruction of a robot component
#macro( constructor $component )${helper.getInstruction($component, "Construction")}#end

## Get the livewindow instruction of a robot component
#macro( livewindow $component )${helper.getInstruction($component, "LiveWindow")}#end

## Get the extra instruction of a robot component
#macro( extra $component )${helper.getInstruction($component, "Extra")}#end

## Get the extra instruction of a robot component
#macro( prototype $component )${helper.getInstruction($component, "Prototype")}#end

## Get the extra instruction of a robot component
#macro( function $component )${helper.getInstruction($component, "Function")}#end

## Get the extra instruction of a robot component
#macro( pid $component )${helper.getInstruction($component, "PID")}#end

## Gets the C++ type of the parameter
#macro( param_type $param )
#if( $param.getType() == "String")std::string#elseif( $param.getType() == "boolean" )bool#elseif( $param.getType() == "byte" )uint8_t#else$param.getType()#end
#end

## Generate command parameter declaration for C++
#macro( param_declaration_cpp $param )#param_type( $param ) $param.getName()#end

## Generate parameter use
#macro( param_set $param )#if( $param.isSubsystemConstant() )#cppify( $param )#elseif( $param.isReference() )$param.getValue().replaceAll("^\\$", "")#elseif( $param.getType() == "String" )"$param.getValue()"#else$param.getValue()#end#end

## Generates 'new MyCommand(arg0, arg1, arg2, ...)'
#macro( command_instantiation $command $params )
#set($len = $params.size() - 2)
#set($last = $len + 1)
new #class($command)(#if( $len >= 0 )#foreach($i in [0..$len])#param_set( $params.get($i) ), #end#end#if( $last >= 0 )#param_set( $params.get($last) )#end)#end

## Generate constant declaration (for .h files)
#macro( declare_constant $constant )
const static #param_type( $constant ) $constant.getName();
#end

## Generate constant defenition (for .cpp files)
#macro( define_constant $subsystem $constant )
const #param_type( $constant ) #class( $subsystem.name )::$constant.getName() = #if( $constant.getType() == "String" )"$constant.getValue()"#else$constant.getValue()#end;
#end

## Converts subsystem.constant to subsystem::constant
#macro( cppify $constant )#get_subsystem( $constant )::#get_name( $constant )#end

#macro( get_subsystem $constant )#class( $helper.stringSplit($constant.getValue(), "\.").get(0) )#end
#macro( get_name $constant )$helper.stringSplit($constant.getValue(), "\.").get(1)#end

## Generate autogenerated code blocks
#macro( autogenerated_code $id $space )
$space// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=$id.toUpperCase()
$bodyContent$space// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=$id.toUpperCase()
#end

## Generate the header
#macro( header )
// ${version_indicator}
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#end