
package robotbuilder;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.Vector;
import java.util.stream.Collectors;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;

import lombok.NonNull;

import robotbuilder.data.RobotComponent;
import robotbuilder.data.properties.ParameterSet;
import robotbuilder.data.properties.ParameterSetProperty;
import robotbuilder.data.properties.ParametersProperty;
import robotbuilder.data.properties.Property;
import robotbuilder.data.properties.ValuedParameterDescriptor;

/**
 * Dialog for editing command parameters.
 *
 * @author Sam Carlberg
 */
public class ParameterEditorDialog extends CenteredDialog {

    private final ParameterSetProperty presetsProp;
    private final ParametersProperty paramProp;
    private final List<ValuedParameterDescriptor> parameterList;
    private final List<ValuedParameterDescriptor> constantsList;
    private final String requiredSubsystemName;

    public ParameterEditorDialog(@NonNull RobotComponent component, JFrame owner, boolean modal) {
        super(owner, "Edit parameters");
        paramProp = Utils.getParametersProperty(component);
        ParametersProperty commandParams = Utils.getParameters(component);
        paramProp.matchUpWith(commandParams);
        parameterList = (List<ValuedParameterDescriptor>) paramProp.getValue();

        Property<?> commandProp = null;
        for (String propKey : component.getPropertyKeys()) {
            if (propKey.endsWith("Command")) {
                commandProp = component.getProperty(propKey);
                break;
            }
        }
        if (commandProp == null) {
            throw new NullPointerException("The given component does not have a command property");
        }
        RobotComponent command = component.getRobotTree().getComponentByName((String) commandProp.getValue());
        RobotComponent required = null;
        if (command != null) {
            presetsProp = (ParameterSetProperty) command.getProperty("Parameter presets");
            Property requiredProp = command.getProperty("Requires");
            if (requiredProp != null) {
                required = component.getRobotTree().getComponentByName((String) requiredProp.getValue());
            }
        } else {
            presetsProp = null;
        }
        if (required != null) {
            constantsList = (List) required.getProperty("Constants").getValue();
            requiredSubsystemName = required.getName();
        } else {
            constantsList = new ArrayList<>();
            requiredSubsystemName = "None";
        }
        initComponents();
        parameterTable.setShowHorizontalLines(true);
        parameterTable.setShowVerticalLines(true);
        parameterTable.setRowHeight(25);
        parameterTable.setBackground(new Color(240, 240, 240));
        parameterTable.setGridColor(Color.BLACK);
        parameterList.stream().forEach(p -> getTableModel().addRow(p.toArray()));
        List<String> options = new ArrayList<>();
        options.addAll(presetsProp.getValue().stream()
                .map(ParameterSet::getName)
                .collect(Collectors.toList()));
        presetsBox.setModel(new DefaultComboBoxModel(options.toArray(new String[0])));
        presetsBox.setSelectedIndex(-1);

    }

    public List<ValuedParameterDescriptor> showAndGetParameters() {
        setVisible(true);
        return getParameters();
    }

    public List<ValuedParameterDescriptor> getParameters() {
        return (List<ValuedParameterDescriptor>) paramProp.getValue();
    }

    private void save() {
        Vector<Vector> dataVector = getTableModel().getDataVector();
        List<ValuedParameterDescriptor> params = new ArrayList<>();
        dataVector.stream().forEach((dataRow) -> {
            String name = (String) dataRow.get(0);
            ValuedParameterDescriptor existing = paramProp.getParameterByName(name);
            existing.setValue(dataRow.get(2));
            params.add(existing);
        });
        paramProp.setValueAndUpdate(params);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        parameterTable = new robotbuilder.ParameterEditorTable(requiredSubsystemName, constantsList);
        saveButton = new javax.swing.JButton();
        presetsLabel = new javax.swing.JLabel();
        presetsBox = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        parameterTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Type", "Value"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        parameterTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        parameterTable.setDragEnabled(true);
        parameterTable.setShowGrid(true);
        parameterTable.getTableHeader().setReorderingAllowed(false);
        parameterTable.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                resizeTable(evt);
            }
        });
        jScrollPane1.setViewportView(parameterTable);

        saveButton.setText("Save and close");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        presetsLabel.setText("Apply preset:");

        presetsBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        presetsBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                presetsBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(saveButton))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(presetsLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(presetsBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(presetsLabel)
                    .addComponent(presetsBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 228, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(saveButton))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        save();
        dispose();
    }//GEN-LAST:event_saveButtonActionPerformed

    private void resizeTable(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_resizeTable
        ((ParameterEditorTable) parameterTable).resizeToFit();
    }//GEN-LAST:event_resizeTable

    private void presetsBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_presetsBoxActionPerformed
        String selected = (String) presetsBox.getSelectedItem();
        if (selected == null) {
            return;
        }
        presetsBox.setSelectedIndex(-1);
        System.out.println("Setting to preset \"" + selected + "\"");
        Optional<ParameterSet> preset = presetsProp.getValue().stream()
                .filter(p -> p.getName().equals(selected))
                .findAny();
        System.out.println("Preset: " + preset.get());
        preset.ifPresent(p -> {
            List<ValuedParameterDescriptor> parameters = p.getParameters();
            for (int i = 0; i < parameters.size(); i++) {
                parameterTable.setValueAt(parameters.get(i).getValue(), i, 2);
            }
        });
        repaint();
    }//GEN-LAST:event_presetsBoxActionPerformed

    private DefaultTableModel getTableModel() {
        return (DefaultTableModel) parameterTable.getModel();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable parameterTable;
    private javax.swing.JComboBox presetsBox;
    private javax.swing.JLabel presetsLabel;
    private javax.swing.JButton saveButton;
    // End of variables declaration//GEN-END:variables
}
